(function(){
'use strict';
angular.module('keyManagement', ['ui.router','ngTable', '720kb.datepicker','ngAnimate', 'ui.bootstrap'])

.config(["$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider){
  $urlRouterProvider.otherwise('/');
   $stateProvider
        .state('root',{
          url: '',
          abstract: true,
          views: {
            'header': {
                templateUrl: 'min_partials/header.html'
            },
            'footer' : {
                templateUrl: 'min_partials/footer.html'
            },
            'left' : {
                templateUrl: 'min_partials/leftMenu.html'
            }
          }
        })
        .state('root.home', {
            url: '/',
            views : {
                'content@' : {
                    templateUrl: 'min_partials/content.html',
                    controller : 'mainController'
                }
          }
        })
        .state('root.secondary',{
            url: '/secondary',
            views : {
                'content@' : {
                    templateUrl : 'min_partials/secondaryContent.html',
                    controller : 'secondaryController'
                }
            }
        })
}]);
})();
(function(){
"use strict";

  angular.module('keyManagement').directive('datamodal', function () {
    return {
      template: '<div class="modal fade">' + 
          '<div class="modal-dialog">' + 
            '<div class="modal-content">' + 
              '<div class="modal-header">' + 
                '<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>' + 
                '<h4 class="modal-title">{{ title }}</h4>' + 
              '</div>' + 
              '<div class="modal-body" ng-transclude></div>' + 
            '</div>' + 
          '</div>' + 
        '</div>',
      restrict: 'E',
      transclude: true,
      replace:true,
      scope:true,
      link: function postLink(scope, element, attrs) {
        scope.title = attrs.title;

        scope.$watch(attrs.visible, function(value){
          if(value == true)
            $(element).modal('show');
          else
            $(element).modal('hide');
        });

        $(element).on('shown.bs.modal', function(){
          scope.$apply(function(){
            if(scope.$$childHead.secondary != undefined)
            scope.$$childHead.secondary.modalForm.$submitted = false;
            if(scope.$$childHead.modalForm)
            scope.$$childHead.modalForm.$submitted = false;
            scope.$parent[attrs.visible] = true;
          });
        });

        $(element).on('hidden.bs.modal', function(){
          scope.$apply(function(){
            scope.$$childHead.newdata = {};
            scope.$parent[attrs.visible] = false;
          });
        });
      }
    };
  });
  })();
(function() {
    "use strict";

    angular.module('keyManagement')
    .directive('pwCheck', [function () {
    return {
      require: 'ngModel',
      link: function (scope, elem, attrs, ctrl) {
        var firstPassword = '#' + attrs.pwCheck;
        $(elem).add(firstPassword).on('keyup', function () {
          scope.$apply(function () {
            var v = elem.val()===$(firstPassword).val();
            ctrl.$setValidity('pwmatch', v);
          });
        });
      }
    }
  }]);
})();
(function(){
'use strict';
	angular.module('keyManagement')
	.directive('tableData',["parseProperties",function(parseProperties){
		return{
			restrict : 'A',
			scope: {
	        	components: '=',
	        	save: '&',
	        	edit: '&',
	        	cancel: '&',
	        	delete: '&',
	        	onSelect: '&',
	        	primarykeylist: '='
	        },
			templateUrl : 'min_partials/tableDirectiveContent.html',
			link : function postLink(scope, element, attrs){
				scope.props = parseProperties.parseProps(attrs.columnheader);
				scope.fieldprops = parseProperties.parseProps(attrs.columnfield);
			}
		};
	}]);
})();
(function() {
    "use strict";

    angular.module('keyManagement').controller('mainController', ["loadJson", "$scope",function (loadJson,$scope){
    	$scope.showError = false;
    	$scope.showEditError = false;
    	$scope.disabledKey = true;
    	var todaysDate = new Date();
    	$scope.dateToday = todaysDate.toDateString();
    	loadJson.getTableDefaultList().then(function(tableData) {
    		$scope.data =  [];
    		angular.forEach(tableData.data, function(item) {
    			 $scope.data.push(item);
    		});
		});

		$scope.showModal = false;
	    $scope.toggleModal = function(){
	        $scope.showModal = !$scope.showModal;
	    };

	    $scope.isValidationModeDisabled = true;
	    $scope.isSizeOfKeyDisabled = true;

	    $scope.change = function(val) {
	        if(val === "Type1" || val === "Type3"){
	        	$scope.isValidationModeDisabled = false;
	        }else if(val === "Type2" || val === "Type4"){
	        	$scope.isValidationModeDisabled = true;
	        	$scope.isSizeOfKeyDisabled = true;
	        }
	    };

	    $scope.changeValidationMode = function(){
	    	$scope.isSizeOfKeyDisabled = false;
	    };

       	$scope.addDataToTable = function(obj,modalForm){
       		if(obj != undefined){
       			if(modalForm.$valid){
		       		$scope.showError = false;
			    	var genKey = Math.random().toString(36).substr(2, 16);
			    	angular.forEach($scope.data, function(objValue,objKey){
		            	angular.forEach(objValue, function(val,key){
		            		if(genKey == val){
		            			Math.random().toString(36).substr(2, 16);
		            		}
		            	});
		            });
			    	$scope.data.push({
		                'description': obj.description, 
		                'typeOfKey': obj.typeOfKey,
		                'validationMode': obj.validationMode,
		                'sizeOfKey' : obj.sizeOfKey,
		                'password': obj.password,
		                'confirmPassword': obj.confirmpassword,
		                'activatesOn': obj.activatesOn,
		                'expiresOn': obj.expiresOn,
		                'key' : genKey
		            });
		            $scope.showModal = false;
		    	}
	    	}
	    };

	    $scope.delete = function(id) {
			if(id==0){
				$scope.showError = true;
				$scope.showEditError = false;
			}else{
				$scope.showError = false;
				$scope.showEditError = false;
				if (confirm("Are you sure you want to delete this row?")) {
		            angular.forEach($scope.data, function(value,key){
		            	if(key == id){
							$scope.data.splice( id, 1 );
		                }
		            });
	        	}
			}
        };

        $scope.edit = function(id,row){
        	var confirmPwd = prompt("Please enter your password to edit");
        	if (confirmPwd != null && confirmPwd == row.password) {
        		$scope.showEditError = false;
        		$scope.dataToCancel = row;
		        row.isEditing = true;
        		$scope.showError = false;
		    }else if(confirmPwd == null){
		    	$scope.showEditError = false;
		    }else if(confirmPwd != row.password){
		    	$scope.showEditError = true;
		    	$scope.showError = false;
		    }else{
		    	$scope.showEditError = false;
		    	$scope.showError = false;
		    }
		};

		$scope.cancel = function(id,row,rowForm){
			row.isEditing = false;			
		};

		$scope.save = function(id,row){
			row.isEditing = false;
		};
    }]);
})();


(function() {
    "use strict";

    angular.module('keyManagement').controller('secondaryController', ["loadJson","$scope",function (loadJson,$scope){
    	$scope.secondary = {};
    	$scope.showModal = false;
    	$scope.showError = false;
    	$scope.showEditError = false;
    	$scope.disabledKey = true;
	    $scope.toggleModal = function(){
	        $scope.showModal = !$scope.showModal;
	    };
	    $scope.dataSecondary =  [];
	    loadJson.getTableDefaultList().then(function(tableData) {
    		$scope.primaryKeyList = [];
    		angular.forEach(tableData.data, function(item) {
    			 $scope.primaryKeyList.push({
		                'key': item.key,
		                'activatesOn' : item.activatesOn,
		                'expiresOn' : item.expiresOn
		            });
    		});
		});

		$scope.addDataToSecondaryTable = function(){		
       			if($scope.secondary.modalForm.$valid){
		       		$scope.showError = false;
			    	var genKey = Math.random().toString(36).substr(2, 16);
			    	angular.forEach($scope.dataSecondary, function(objValue,objKey){
		            	angular.forEach(objValue, function(val,key){
		            		if(genKey == val){
		            			Math.random().toString(36).substr(2, 16);
		            		}
		            	});
		            });
			    	$scope.dataSecondary.push({
		                'description': $scope.secondary.descriptionSecondary,
		                'primarykey' : $scope.secondary.primarykey.key,
		                'activatesOn': $scope.secondary.activatesOnSecondary,
		                'expiresOn': $scope.secondary.expiresOnSecondary,
		                'key' : genKey,
		                'password' : $scope.secondary.passwordSecondary
		            });
		            $scope.showModal = false;
		    	}
	    	
	    };

	    $scope.onSelect = function ($item, $model, $label, mflag,row) {
	    	if(mflag == ""){
		    	$scope.secondary.activatesOnSecondary = $item.activatesOn;
		    	$scope.secondary.expiresOnSecondary = $item.expiresOn;
			}else if(mflag == "row"){
					row.primarykey = $item.key;
					row.activatesOn = $item.activatesOn;
		    		row.expiresOn = $item.expiresOn;
			}
		};

		$scope.deleteSec = function(id) {
			if(id==0){
				$scope.showError = true;
				$scope.showEditError = false;
			}else{
				$scope.showError = false;
				$scope.showEditError = false;
				if (confirm("Are you sure you want to delete this row?")) {
		            angular.forEach($scope.dataSecondary, function(value,key){
		            	if(key == id){
							$scope.dataSecondary.splice( id, 1 );
		                }
		            });
	        	}
			}
        };

        $scope.editSec = function(id,row){
        	var confirmPwd = prompt("Please enter your password to edit");
        	if (confirmPwd != null && confirmPwd == row.password) {
        		$scope.showEditError = false;
        		$scope.dataToCancel = row;
		        row.isEditing = true;
        		$scope.showError = false;
		    }else if(confirmPwd == null){
		    	$scope.showEditError = false;
		    }else if(confirmPwd != row.password){
		    	$scope.showEditError = true;
		    	$scope.showError = false;
		    }else{
		    	$scope.showEditError = false;
		    	$scope.showError = false;
		    }
		};

		$scope.cancelSec = function(id,row,rowForm){
			row.isEditing = false;			
		};

		$scope.saveSec = function(id,row){
			row.isEditing = false;
		};

    }]);
})();


(function() {
    'use strict';
    angular.module('keyManagement').factory('loadJson', ['$http', function($http) {
        return {
            getTableDefaultList: function() {
                var tableDefaultList = $http.get('assets/js/json/table_data.json').then(function(response) {
                    return response;
                });
                return tableDefaultList;
            }
        }
    }]);
})();
(function(){
	'use strict';
	angular.module('keyManagement')
	.factory('parseProperties',['trimStringFactory',function(trimStringFactory){
    	return {
            parseProps: function(str) {
                var i, props = str.split(",");
	        	for( i=0; i < props.length; i++ ) {
	            	props[i] = trimStringFactory.trimString(props[i]);
	        	}
	        	return props;
            }
        }
	}])
})();
(function(){
'use strict';
	angular.module('keyManagement').factory('trimStringFactory',function(){
		return{
			trimString : function (s){
				return s.replace(/^\s*(\w*)\s*$/,"$1");
			}
		}
	});
})();